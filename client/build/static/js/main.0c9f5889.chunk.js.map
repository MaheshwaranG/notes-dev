{"version":3,"sources":["serviceWorker.js","constants/Constants.js","reducers/authReducer.js","configuration/store.js","components/MgComponents/Popup.js","components/headers/Header.js","actions/auth/authActions.js","components/contents/DefaultPage.js","components/contents/Dashboard.js","components/contents/SurveyNew.js","components/Loading/GifLoading.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/SampleRoute.js","index.js"],"names":["Boolean","window","location","hostname","match","constants","server_api","actions","FETCH_USER","USER_LOGOUT","initialState","isUserLogin","user","authReducer","state","arguments","length","undefined","action","type","Constants","payload","googleId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Popup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","windowClickListners","event","document","getElementById","id","target","targetId","isOpen","isStateChanged","style","display","setState","popupWindowClick","popup","console","log","removeEventListener","onClickComponent","nextProps","top","offsetTop","offsetHeight","right","innerWidth","offsetLeft","offsetWidth","addEventListener","_this2","react_default","a","createElement","class","onClick","children","Component","Header","showPopup","isHeaderPopupOpen","userLogout","logout","href","concat","className","src","auth","photos","borderRadius","height","width","MgComponents_Popup","Link","to","renderContent","previous","connect","_ref","dispatch","axios","get","then","res","data","status","DefaultPage","textAlign","Dashboard","JSON","stringify","SurveyNew","GifLoadingPage","component","rest","objectWithoutProperties","Route","assign","Redirect","PublicRoute","history","createHistory","SampleRoute","isValidated","fetchUser","Router","headers_Header","Switch","PublicRoute_PublicRoute","exact","path","routers_PrivateRoute","Loaders","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","Promise","resolve","stop","_x","apply","store","createStore","combineReducers","applyMiddleware","thunk","jsx","es","routers_SampleRoute","hasrender","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c9f5889.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const constants = {\r\n  server_api: \"http://localhost:5000\",\r\n  actions: {\r\n    FETCH_USER: \"fetch_user\",\r\n    USER_LOGOUT: \"user_logout\"\r\n  }\r\n};\r\n\r\nexport default constants;\r\n","import Constants from \"../constants/Constants\";\r\nlet initialState = {\r\n  isUserLogin: null,\r\n  user: null\r\n};\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Constants.actions.FETCH_USER:\r\n      return {\r\n        isUserLogin: !!(action.payload && action.payload.googleId) || false,\r\n        user: action.payload\r\n      };\r\n    case Constants.actions.USER_LOGOUT:\r\n      return {\r\n        isUserLogin: false,\r\n        user: {}\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"../reducers/authReducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const composeEnhancers = compose;\r\n\r\nexport default () => {\r\n  const store = createStore(\r\n    combineReducers({\r\n      auth: authReducer\r\n    }),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass Popup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isStateChanged: false,\r\n      isOpen: props.isOpen\r\n    };\r\n  }\r\n  // componentDidMount() {\r\n  //   document.addEventListener(\"click\", () => {\r\n  //     console.log(\"popup  click\");\r\n  //   });\r\n  //   // window.onclick = this.windowClickListners;\r\n  // }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.isOpen !== this.state.isOpen) {\r\n      let popup = document.getElementById(this.props.id);\r\n      if (nextProps.isOpen) {\r\n        let target = document.getElementById(\"nave-user-profile\");\r\n        popup.style.top = target.offsetTop + target.offsetHeight + 5 + \"px\";\r\n        popup.style.right =\r\n          window.innerWidth - (target.offsetLeft + target.offsetWidth) + \"px\";\r\n        popup.style.display = \"block\";\r\n        document.addEventListener(\"click\", this.popupWindowClick);\r\n        this.setState({ isOpen: nextProps.isOpen, isStateChanged: true });\r\n        //   return { isOpen: nextProps.isOpen, isStateChanged: true };\r\n      } else {\r\n        popup.style.display = \"none\";\r\n        document.removeEventListener(\"click\");\r\n      }\r\n    }\r\n  }\r\n\r\n  windowClickListners = event => {\r\n    let modal = document.getElementById(this.props.id);\r\n    if (\r\n      event.target.id !== this.props.id &&\r\n      event.target.id !== this.props.targetId &&\r\n      this.state.isOpen &&\r\n      !this.state.isStateChanged\r\n    ) {\r\n      // this.setState({ isOpen: false, isFromState: true });\r\n      let popup = document.getElementById(this.props.id);\r\n      popup.style.display = \"none\";\r\n      this.setState({ isOpen: false });\r\n    } else {\r\n      this.setState({ isStateChanged: false });\r\n    }\r\n  };\r\n\r\n  popupWindowClick = () => {\r\n    let popup = document.getElementById(this.props.id);\r\n\r\n    console.log(\"popup  click\");\r\n    popup.style.display = \"none\";\r\n    this.setState({ isOpen: false, isStateChanged: true });\r\n    document.removeEventListener(\"click\", this.popupWindowClick);\r\n  };\r\n\r\n  onClickComponent = event => {};\r\n  render() {\r\n    return (\r\n      <div\r\n        class=\"mg-popup\"\r\n        id={this.props.id}\r\n        style={{ top: 10 }}\r\n        onClick={event => this.onClickComponent}\r\n      >\r\n        <div>{this.props.children}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Constants from \"../../constants/Constants\";\r\nimport * as actions from \"../../actions/auth/authActions\";\r\nimport Popup from \"../MgComponents/Popup\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isUserLogin: false,\r\n      isHeaderPopupOpen: false\r\n    };\r\n  }\r\n\r\n  showPopup = () => {\r\n    this.setState({ isHeaderPopupOpen: true });\r\n  };\r\n\r\n  userLogout = () => {\r\n    this.props.logout();\r\n    // this.props.history.push(\"/\");\r\n  };\r\n\r\n  static getDerivedStateFromProps(nextProps, previous) {\r\n    let isUserLogin = nextProps.auth.isUserLogin;\r\n    return { isUserLogin: nextProps.auth.isUserLogin };\r\n  }\r\n\r\n  renderContent() {\r\n    switch (this.state.isUserLogin) {\r\n      case null:\r\n        return;\r\n      case false:\r\n        return (\r\n          <li>\r\n            <a href={`${Constants.server_api}/auth/google`}>Log in </a>\r\n          </li>\r\n        );\r\n      default:\r\n        return (\r\n          <li>\r\n            <span\r\n              // onClick={this.userLogout}\r\n              className=\"nav-header-right-img\"\r\n            >\r\n              <img\r\n                src={this.props.auth.user.photos[0][\"value\"]}\r\n                style={{ borderRadius: \"50%\" }}\r\n                height=\"50\"\r\n                width=\"50\"\r\n                onClick={this.showPopup}\r\n                id=\"nave-user-profile\"\r\n              />\r\n              {/* <div\r\n                class=\"mg-popup\"\r\n                id=\"header-popup-user-Profile\"\r\n                style={{ top: 10 }}\r\n              >\r\n                Mahesh\r\n              </div> */}\r\n              <Popup\r\n                id=\"header-popup-user-Profile\"\r\n                targetId=\"nave-user-profile\"\r\n                isOpen={this.state.isHeaderPopupOpen}\r\n              >\r\n                ggfffhhh\r\n              </Popup>\r\n              {/* <a>Log out</a> */}\r\n            </span>\r\n          </li>\r\n        );\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"navbar-fixed\">\r\n          <div className=\"left brand-logo mg-padding-left\">\r\n            {\" \"}\r\n            <Link to=\"/\">Emaily</Link>\r\n          </div>\r\n          <ul className=\"right\">{this.renderContent()}</ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n    // return this.state.isUserLogin ? (\r\n    //   <nav>\r\n    //     <div className=\"nav-wrapper\">\r\n    //       <div className=\"left brand-logo mg-padding-left\">\r\n    //         {\" \"}\r\n    //         <Link to=\"/\">Emaily</Link>\r\n    //       </div>\r\n    //       <ul className=\"right\">{this.renderContent()}</ul>\r\n    //     </div>\r\n    //   </nav>\r\n    // ) : (\r\n    //   <GifLoadingPage />\r\n    // );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  logout: () => dispatch(actions.userLogout())\r\n});\r\n\r\nfunction mapStateToProps({ auth }) {\r\n  return { auth };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Header);\r\n","import axios from \"axios\";\r\nimport Constants from \"../../constants/Constants\";\r\n\r\nexport const fetchUser = () => async dispatch => {\r\n  const res = await axios.get(`/api/currentUser`);\r\n  Promise.resolve(\r\n    dispatch({\r\n      type: Constants.actions.FETCH_USER,\r\n      payload: res.data\r\n    })\r\n  );\r\n  // return Promise.resolve();\r\n};\r\n\r\nexport const userLogout = () => {\r\n  return function(dispatch) {\r\n    axios.get(\"/api/logout\").then(res => {\r\n      if (res.data.status && res.data.status === \"logout\") {\r\n        dispatch({ type: Constants.actions.USER_LOGOUT });\r\n      }\r\n    });\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass DefaultPage extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>Default Page</h1>\r\n        <Link to=\"/Dashboard\"> DashBoard </Link>\r\n        <h3>Colllect your user information</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default DefaultPage;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../actions/auth/authActions\";\r\n\r\nclass Dashboard extends Component {\r\n  componentDidMount() {\r\n    console.log(JSON.stringify(this.props.user));\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>User Home Page</h1>\r\n        <h3>welcome User!!!</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    user: state.auth.user\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Dashboard);\r\n","import React, { Component } from \"react\";\r\n\r\nclass SurveyNew extends Component {\r\n  render() {\r\n    return <div>Login Dash Board</div>;\r\n  }\r\n}\r\n\r\nexport default SurveyNew;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst GifLoadingPage = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <img className=\"loader__image\" src=\"/images/loader.gif\" />\r\n    </div>\r\n  );\r\n};\r\n\r\n// const mapStateToprops = state => ({\r\n//   isUserLogin: state.auth.isUserLogin\r\n// });\r\n\r\n// export default connect(mapStateToprops)(GifLoadingPage);\r\n\r\nexport default GifLoadingPage;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/* function PrivateRoute({ component: Component, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        isUserLogin\r\n          ? // <Component {...props} />\r\n\r\n            //     <Redirect to=\"/dashboard\" />\r\n            null\r\n          : //     <Redirect\r\n            //     to={{\r\n            //       pathname: \"/login\",\r\n            //       state: { from: props.location }\r\n            //     }}\r\n            //   />\r\n            // <Redirect to=\"/\" />\r\n            null\r\n      }\r\n    />\r\n  );\r\n}\r\n*/\r\n\r\nexport const PrivateRoute = ({\r\n  isUserLogin,\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n  // console.log(\"Private Route === \" + JSON.stringify({ ...rest }));\r\n  // console.log(\"Private Route Is user Login \" + isUserLogin);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      component={props =>\r\n        isUserLogin ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  isUserLogin: state.auth.isUserLogin\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport const PublicRoute = ({ isUserLogin, component: Component, ...rest }) => {\r\n  // console.log(\"Public Route === \" + JSON.stringify({ ...rest }));\r\n  // console.log(\"Public Route Is user Login \" + isUserLogin);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      component={props =>\r\n        isUserLogin ? <Redirect to=\"/Dashboard\" /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  isUserLogin: state.auth.isUserLogin\r\n});\r\n\r\nexport default connect(mapStateToProps)(connect);\r\n","import React, { Component } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport createHistory from \"history/createBrowserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/auth/authActions\";\r\nimport Header from \"../components/headers/Header\";\r\nimport DefaultPage from \"../components/contents/DefaultPage\";\r\nimport Dashboard from \"../components/contents/Dashboard\";\r\nimport SurveyNew from \"../components/contents/SurveyNew\";\r\nimport Loaders from \"../components/Loading/GifLoading\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport { PublicRoute } from \"./PublicRoute\";\r\n\r\nexport const history = createHistory();\r\n\r\nclass SampleRoute extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isValidated: false\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this.props.fetchUser().then(data => {\r\n      this.setState({ isValidated: true });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Router history={history}>\r\n        {this.state.isValidated ? (\r\n          <div>\r\n            <Header />\r\n            <Switch>\r\n              {/* <Route exact={true} path=\"/\" component={DefaultPage} /> */}\r\n              {/* <Route exact={true} path=\"/Dashboard\" component={Dashboard} />\r\n            <Route exact={true} path=\"/surveys/new\" component={SurveyNew} /> */}\r\n              <PublicRoute exact={true} path=\"/\" component={DefaultPage} />\r\n              <PrivateRoute\r\n                exact={true}\r\n                path=\"/Dashboard\"\r\n                component={Dashboard}\r\n              />\r\n              <PrivateRoute\r\n                exact={true}\r\n                path=\"/surveys/new\"\r\n                component={SurveyNew}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Route exact={true} path=\"/\" component={Loaders} />\r\n          </div>\r\n        )}\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchUser: () => dispatch(actions.fetchUser())\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  isUserLogin: state.auth.isUserLogin\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SampleRoute);\r\n","import \"materialize-css/dist/css/materialize.min.css\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport Constants from \"./constants/Constants\";\r\nimport configureStore from \"./configuration/store\";\r\n// import AppRouter, { history } from \"./routers/AppRouter\";\r\nimport SampleRoute, { history } from \"./routers/SampleRoute\";\r\nimport GifLoadingPage from \"./components/Loading/GifLoading\";\r\nimport * as actions from \"./actions/auth/authActions\";\r\nimport \"./css/App.css\";\r\n\r\nconst store = configureStore();\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"app-login-area\">\r\n          <div className=\"app-login-title-area\">\r\n            <a href={`${Constants.server_api}/auth/google`}>\r\n              Sign In With Google\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst jsx = (\r\n  <Provider store={store}>\r\n    {/* <AppRouter /> */}\r\n    <SampleRoute />\r\n  </Provider>\r\n);\r\n\r\nlet hasrender = false;\r\nconst renderApp = () => {\r\n  if (!hasrender) {\r\n    ReactDOM.render(jsx, document.getElementById(\"root\"));\r\n    hasrender = true;\r\n  }\r\n};\r\n\r\n// store.dispatch(actions.fetchUser);\r\n\r\nrenderApp();\r\n\r\n// ReactDOM.render(\r\n//   <GifLoadingPage component={jsx} />,\r\n//   document.getElementById(\"root\")\r\n// );\r\n\r\n// store.dispatch(actions.fetchUser).then(() => {\r\n//   console.log();\r\n// });\r\n\r\n// let promise = new Promise(function(resolve, reject) {\r\n//   resolve(store.dispatch(actions.fetchUser));\r\n// });\r\n\r\n// promise.then(value => {\r\n//   console.log(\"SAVED Called\" + value);\r\n// });\r\n\r\nif (store.auth && store.auth.isUserLogin) {\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}